import 'package:http/http.dart' as http;
import 'dart:convert';

class PBService {
  static const String baseUrl = 'http://127.0.0.1:8090';
  static const String collection = 'menus';

  // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å PocketBase
  static Future<List<dynamic>> fetchMenus() async {
    final url = Uri.parse('$baseUrl/api/collections/$collection/records');

    try {
      final res = await http.get(url);
      if (res.statusCode == 200) {
        final body = jsonDecode(res.body);
        print('üì¶ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${body['items'].length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£');
        return body['items'];
      } else {
        print('‚ùå ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß (${res.statusCode})');
        return [];
      }
    } catch (e) {
      print('‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: $e');
      return [];
    }
  }

  // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏°‡∏ô‡∏π‡πÉ‡∏´‡∏°‡πà
  static Future<bool> createMenu(Map<String, dynamic> data) async {
    final url = Uri.parse('$baseUrl/api/collections/$collection/records');
    try {
      final res = await http.post(
        url,
        headers: {'Content-Type': 'application/json'},
        body: jsonEncode({
          'Name': data['name'],
          'Price': data['price'],
          'Category': data['category'],
          'Available': data['available'],
          'ImageUrl': data['imageUrl'] ?? '',
        }),
      );
      return res.statusCode == 200;
    } catch (e) {
      print('‚ö†Ô∏è ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏°‡∏ô‡∏π‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: $e');
      return false;
    }
  }

  // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏°‡∏ô‡∏π
  static Future<bool> updateMenu(String id, Map<String, dynamic> data) async {
    final url = Uri.parse('$baseUrl/api/collections/$collection/records/$id');
    try {
      final res = await http.patch(
        url,
        headers: {'Content-Type': 'application/json'},
        body: jsonEncode({
          'Name': data['name'],
          'Price': data['price'],
          'Category': data['category'],
          'Available': data['available'],
        }),
      );
      return res.statusCode == 200;
    } catch (e) {
      print('‚ö†Ô∏è ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏°‡∏ô‡∏π‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: $e');
      return false;
    }
  }

  // ‚úÖ ‡∏•‡∏ö‡πÄ‡∏°‡∏ô‡∏π
  static Future<bool> deleteMenu(String id) async {
    final url = Uri.parse('$baseUrl/api/collections/$collection/records/$id');
    try {
      final res = await http.delete(url);
      return res.statusCode == 204;
    } catch (e) {
      print('‚ö†Ô∏è ‡∏•‡∏ö‡πÄ‡∏°‡∏ô‡∏π‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: $e');
      return false;
    }
  }

  // ‚úÖ ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏•‡∏∞‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ (‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏´‡∏≤‡∏¢‡πÑ‡∏õ!)
  static Future<Map<String, int>> getMenuStats() async {
    try {
      final allMenus = await fetchMenus();
      final available = allMenus.where((m) => m['Available'] == true).length;
      final unavailable = allMenus.length - available;
      
      return {
        'total': allMenus.length,
        'available': available,
        'unavailable': unavailable,
      };
    } catch (e) {
      print('‚ö†Ô∏è ‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: $e');
      return {'total': 0, 'available': 0, 'unavailable': 0};
    }
  }
}